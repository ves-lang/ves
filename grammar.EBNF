program = ( line | export | import )* EOF ;


line = statement EOL ;

import = "import" ( direct_import | destructured_import ) EOL ;
direct_import = import_name alias? ;
destructured_import = "{" alias_list "}" "from" import_name ;
import_name = IDENTIFIER | PATH ;
alias = "as" IDENTIFIER ;
alias_lis = IDENTIFIER alias? ( "," IDENTIFIER alias? )* ;

export = "export" ( export_statement | export_block ) EOL ;
export_statement = var_decl | fn_decl | struct_decl ;
export_block = "{" alias_list "}" ;

statement = block
    | var_decl
    | print_stmt
    | loop_stmt
    | control_stmt
    | defer_stmt
    | return_stmt
    | expr_stmt
    ;

block = "{" line* "}" ;
print_stmt = "print" comma ;

var_decl = let_decl | mut_decl ;
let_decl = "let" binding ("," binding )* ;
mut_decl = "mut" IDENTIFIER ("=" expression)? ("," IDENTIFIER ("=" expression)? )* ;
binding = IDENTIFIER "=" expression ;

loop_stmt = ( label ":" )? (
    for_stmt
    | while_stmt
    | loop_stmt
);
label = "@" IDENTIFIER ;
for_stmt = ( for_each | for_loop );
for_each = "for" IDENTIFIER "in" for_range block ; 
for_loop = "for" ( binding "," )* ";" expression? ";" expression blcok ;
for_range = expression ( ( ".." | "..=" ) expression ( "," experssion )? )? ;

while_stmt = "while" condition block ;
loop_stmt = "loop" block ;

control_stmt = ( "break" | "continue" ) label ;

condition = ( ( "ok" | "err" ) "(" IDENTIFIER ")" "=" )? expression ;

defer_stmt = "defer" ( block | call );
expr_stmt = comma ( ";" comma )* ;

return_stmt = "return" ( expression )? ;

comma = expression ( "," expression )* ;

expression = struct_decl 
    | fn_decl 
    | if_expr
    | do_block
    | assignment
    ;

struct_decl = "struct" IDENTIFIER? ( "(" names? default_params? ")" )? ( "{" struct_body "}" )? ;
names = IDENTIFIER ("," IDENTIFIER )* ","? ;
struct_doby = init_block | binding | instance_method | static_method ;
init_block  = "init" block ;
instance_method  =  IDENTIFIER "(" "self" ( ", " params? )? ")" fn_body ;
static_method  =  IDENTIFIER param_pack fn_body ;

fn_decl = "fn" IDENTIFIER param_pack fn_body ;
fn_body =  ("=>" expression | block ) ;
param_pack = "(" params? ")" ;
params = names? default_params? rest_params? ;
defualt_params = IDENTIFIER "=" expression | ( "," IDENTIFIER "=" expression )* ;
rest_params = "..." IDENTIFIER ;

if_expr = "if" condition block ( "else" ( if_expr | block ) )? ;

do_block = "do" block ;

assignment = 
    assignment_target ( assignment_op expression )?
    | logic_or 
    ;
assignment_op = "+=" | "-=" | "*=" | "/=" | "**=" | "%="  "||=" | "&&=" ;
assignment_target = IDENTIFIER |
  | call property_access
  | call item_access
  ;

logic_or       = logic_and ( "||" logic_and )* ;
logic_and      = equality ( "&&" equality )* ;
equality       = comparison ( ( "==" | "!=" | "is" | "in" ) comparison )* ;
comparison     = addition ( ( ">" | ">=" | "<" | "<=" ) addition )* ;
addition       = multiplication ( ( "-" | "+" ) multiplication )* ;
multiplication = exponentiation ( ("/" | "*" | "%" ) exponentiation )* ;
exponentiation = unary ( ( "**" ) exponentiation )* ;
unary          = ( "!" | "-" | "try" | "ok" | "err" ) unary 
    | inc
    | dec
    | call
    ;

inc = "++" assignment_target | assignment_target "++" ;
dec = "--" assignment_target | assignment_target "--" ;

call = primary ( 
    "(" args? ")" 
    | ( "." | "?." ) IDENTIFIER
    | "[" expression "]"
)* ;


property_access = ( "." | "?." ) IDENTIFIER ;
item_access     = "[" expression "]" ;

args = spread_expr ( "," spread_expr )* ","? ;
spread_expr = "..."? expression ;

primary = "true" | "false" | "none" | "self" 
    | NUMBER 
    | STRING
    | array_literal
    | map_literal
    | grouping
    ;

array_literal = "[" args? "]" ;
map_literal = "{" pairs? "}" ;
pairs = pair ( "," pair ) ","? ;
pair = expression ":" expression ;
grouping = "(" comma ")" ;

IDENTIFIER = [a-zA-Z_][a-zA-Z0-9_]* ;

NUMBER = -?((((([0-9]+)(\\.[0-9]*)?)|(\\.[0-9]+))([Ee][+-]?[0-9]+)?)|(NaN)|(inf)) ;

STRING = INTEPROLATED_STRING | NORMAL_STRING ;

INTEPROLATED_STRING = "f" QUOTE INTERP_FRAGMENT* QUOTE ;

INTERP_FRAGMENT = "{" expression "}" | "\{" UTF8 "}" | UTF8 ;

NORMAL_STRING = QUOTE UTF8* QUOTE ;

QUOTE = "'" | '"' ;

@first: for i in 0..=10 {
    @second: for j in 0..10 {
        print(i,j)
        continue @first
    }
}

%output

// @first.pre_start:
|0000| PushNum32(0.0)   // i
|0001| PushNum32(10.0)  // first.[[END]]
|0002| PushNum32(1.0)   // first.[[STEP]]
// @first.start:
|0003| GetLocal(0)      // get i
|0004| GetLocal(1)      // get first.[[END]]
|0005| LessEqual        // i < first.[[END]]
|0006| JumpIfFalse(39)  // jump_if_false @first.exit
|0007| Pop              // pop result of condition
|0008| Jump(15)         // jump @first.body
// @first.latch:
|0009| GetLocal(0)      // get i
|0010| GetLocal(2)      // get first.[[STEP]]
|0011| Add              // i + first.[[STEP]]
|0012| SetLocal(0)      // set i
|0013| Pop              // pop (i + first.[[STEP]])
|0014| Jump(3)          // jump @first.start
// @first.body:
// @second.pre_start:
|0015| PushNum32(0.0)   // j
|0016| PushNum32(10.0)  // second.[[END]] 
|0017| PushNum32(1.0)   // second.[[STEP]]
// @second.start:
|0018| GetLocal(3)      // get j
|0019| GetLocal(4)      // get second.[[END]]
|0020| LessThan         // j < second.[[END]]
|0021| JumpIfFalse(36)  // jump_if_false @loop.exit
|0022| Pop              // pop result of condition
|0023| Jump(30)         // jump @loop.body
// @second.latch:
|0024| GetLocal(3)      // get j
|0025| GetLocal(5)      // get second.[[STEP]]
|0026| Add              // j + second.[[STEP]]
|0027| SetLocal(3)      // set j
|0028| Pop              // pop (j + second.[[STEP]])
|0029| Jump(18)         // jump @second.start
// @second.body:
|0030| GetLocal(0)      // get i
|0031| GetLocal(3)      // get j
|0032| PrintN(2)        // print(i, j)
|0033| PopN(3)          // pop j, second.[[END]], second.[[STEP]]
|0034| Jump(9)          // continue @first.latch
|0035| Jump(24)         // jump @second.latch (unreachable)
// @second.exit:
|0036| Pop              // pop result of condition
|0037| PopN(3)          // pop j, second.[[END]], second.[[STEP]]
// @second.end:
|0038| Jump(9)          // jump @first.latch
// @second.exit:
|0039| Pop              // pop result of condition
|0040| PopN(3)          // pop i, first.[[END]], first.[[STEP]]
// @second.end:
|0041| Return
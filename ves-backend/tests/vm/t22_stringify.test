struct First(a, b, c) { 
    method(self) {}
}

struct A(a = 5)
struct B(b1 = 4, b2 = 5)
struct C(c) { 
    @str(self) {
        return f"<C: custom @str = {self.c}>";
    }
}

let first = First(A(), B(), C(false))
print(first);

// Circular reference
let a1 = A(none)
let a2 = A(a1)
print(a2)

a1.a = a2
print(a2)

let a3 = A(C(a2))
print(a3)

%output

First { a: A { a: 5, init: <fn A.init> }, b: B { b1: 4, b2: 5, init: <fn B.init> }, c: <C: custom @str = false>, method: <fn First.method> }
A { a: A { a: 5, init: <fn A.init> }, init: <fn A.init> }
A { a: A { a: ..., init: <fn A.init> }, init: <fn A.init> }
A { a: <C: custom @str = A { a: A { a: ..., init: <fn A.init> }, init: <fn A.init> }>, init: <fn A.init> }
